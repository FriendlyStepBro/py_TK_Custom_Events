name: Build and Save Wheels

on:
  workflow_dispatch:
  push:
    branches-ignore:
      - build  # Prevent workflow from running when pushing to the build branch

permissions:
  contents: write  # Allows the workflow to push changes to the repository

jobs:
  build_wheels:
    name: Build Wheels for ${{ matrix.os }} on Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.12']
        architecture: ['x64']

    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}

      - name: Install dependencies for Linux/Mac
        if: matrix.os != 'windows-latest'
        run: |
          if [[ ${{ matrix.os }} == 'ubuntu-latest' ]]; then
            sudo apt-get update
            sudo apt-get install -y tk-dev tcl-dev libx11-dev
          elif [[ ${{ matrix.os }} == 'macos-latest' ]]; then
            brew install xquartz  # Install XQuartz to get X11 libraries
            export LIBRARY_PATH="/opt/X11/lib"  # Ensure X11 libraries are correctly linked
          fi
          python -m pip install --upgrade pip setuptools wheel

      - name: Install Tcl/Tk and Set Paths for Windows
        if: matrix.os == 'windows-latest'
        run: |
          choco install tcl-tk  # Install Tcl/Tk via Chocolatey
          setx TCL_INCLUDE_DIR "C:\Program Files\Tcl\include"  # Path to Tcl/Tk headers
          setx TCL_LIB_DIR "C:\Program Files\Tcl\lib"  # Path to Tcl/Tk libraries
          setx TCL_LIBRARY "C:\Program Files\Tcl\lib"
          setx TK_LIBRARY "C:\Program Files\Tcl\lib"
          setx PATH "%PATH%;C:\Program Files\Tcl\bin"
          python -m pip install --upgrade pip setuptools wheel

      - name: Build wheel
        run: |
          if [ "${{ matrix.os }}" = 'windows-latest' ]; then
            export INCLUDE="${INCLUDE};C:/Program Files/Tcl/include"
            export LIB="${LIB};C:/Program Files/Tcl/lib"
          else
            export INCLUDE="${INCLUDE}:${TCL_INCLUDE_DIR}"
            export LIB="${LIB}:${TCL_LIB_DIR}"
          fi
          python setup.py bdist_wheel  # Build the wheel
        shell: bash  # Use bash shell for this step
        env:
          pythonLocation: /opt/hostedtoolcache/Python/3.12.7/x64
          PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.12.7/x64/lib/pkgconfig
          Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.7/x64
          Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.7/x64
          Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.7/x64
          LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.12.7/x64/lib

      - name: Force recreate and push built wheel to build branch
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          git clean -fd  # Remove untracked files (such as wheel files in 'dist/')
          
          # Ensure we are on the build branch or create it
          git checkout -B build  # Switch to the build branch or create it if it doesn't exist
          
          # Rebuild the wheel file
          python setup.py bdist_wheel  # Generate the wheel files
          
          # Add the new wheel files to Git
          git add dist/*
          git commit -m "Add built wheels for 3.12 on ${{ matrix.os }} (x64)"
          
          # Force push to discard and recreate the build branch
          git push --force origin build  # Force push to overwrite the existing build branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}